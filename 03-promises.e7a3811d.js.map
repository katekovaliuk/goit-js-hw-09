{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SA8BA,IAAMC,EAAUC,SAASC,cAAc,SACvCC,QAAQC,IAAIJ,GAEZA,EAAQK,iBAAiB,UAEzB,SAAuBC,G,kBAWnB,IAAIC,EAAQC,EAAaC,GAAaC,EAAW,GAEjDP,QAAQC,IAAI,CAAEM,WAAUH,UA9C5B,SAAuBG,EAAUH,GAE/B,OAAO,IAAII,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACJF,EAAQ,YAIRC,EAAO,S,GAGNN,E,IAkCHW,CAAcR,EAAUH,GACrBY,MAAK,WAEJrB,EAAAsB,OAAOC,QAAQ,qBAAoCC,OAAfZ,EAAS,QAAYY,OAANf,EAAM,O,IAE1DgB,OAAM,WAELzB,EAAAsB,OAAOI,QAAQ,oBAAmCF,OAAfZ,EAAS,QAAYY,OAANf,EAAM,O,KApB9DD,EAAMmB,iBASN,IAPA,IAAMjB,EAAakB,OAAO1B,EAAQO,MAAMoB,OAClClB,EAAYiB,OAAO1B,EAAQ4B,KAAKD,OAChCE,EAASH,OAAO1B,EAAQ6B,OAAOF,OAK5BG,EAAW,EAAGA,GAAYD,EAAQC,GAAY,EAACC,EAAAD,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nfunction createPromise(position, delay) {\n\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n      resolve(\"Success!\");\n      // Notify.success(`Fulfilled promise ${position} in ${delay} ms`);\n      // Fulfill\n    } else {\n      reject(\"Error!\");// Reject\n      // Notify.failure(`Rejected promise ${position} in ${delay} ms`);\n    }\n    }, delay)\n    \n  });\n};\n\n// createPromise(3, 1000)\n//   .then(({ position, delay }) => {\n//     // console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//     Notify.success(`Fulfilled promise ${position} in ${delay} ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     // console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//     Notify.failure(`Rejected promise ${position} in ${delay} ms`);\n//   });\n\nconst formRef = document.querySelector('.form');\nconsole.log(formRef);\n\nformRef.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit (event) {\n  event.preventDefault();\n\n  const firstDelay = Number(formRef.delay.value);\n  const stepDelay = Number(formRef.step.value);\n  const amount = Number(formRef.amount.value);\n  // console.log(firstDelay);\n  // console.log(stepDelay);\n  // console.log(amount);\n\n  for (let position = 1; position <= amount; position += 1) {\n    let delay = firstDelay + stepDelay * (position - 1);\n    \n    console.log({ position, delay });\n    createPromise(position, delay)\n      .then(() => {\n  // console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        Notify.success(`Fulfilled promise ${position} in ${delay} ms`);\n      })\n      .catch(() => {\n        // console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        Notify.failure(`Rejected promise ${position} in ${delay} ms`);\n      });\n  }\n\n};"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$formRef","document","querySelector","console","log","addEventListener","event","delay","firstDelay","stepDelay","position","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","$ce04d3a99e08e73b$var$createPromise","then","Notify","success","concat","catch","failure","preventDefault","Number","value","step","amount","position1","_loop"],"version":3,"file":"03-promises.e7a3811d.js.map"}