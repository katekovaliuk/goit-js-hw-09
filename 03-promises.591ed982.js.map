{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,SAASC,EAAcC,EAAUC,GAE/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACJF,EAAQ,YAIRC,EAAO,SAAS,GAGfH,EAAM,G,CAeb,MAAMQ,EAAUC,SAASC,cAAc,SACvCC,QAAQC,IAAIJ,GAEZA,EAAQK,iBAAiB,UAEzB,SAAuBC,GACrBA,EAAMC,iBAEN,MAAMC,EAAaC,OAAOT,EAAQR,MAAMkB,OAClCC,EAAYF,OAAOT,EAAQY,KAAKF,OAChCG,EAASJ,OAAOT,EAAQa,OAAOH,OAKrC,IAAK,IAAInB,EAAW,EAAGA,GAAYsB,EAAQtB,GAAY,EAAG,CACxD,IAAIC,EAAQgB,EAAaG,GAAapB,EAAW,GAEjDY,QAAQC,IAAI,C,SAAEb,E,MAAUC,IACxBF,EAAcC,EAAUC,GACrBsB,MAAK,KAEJ1B,EAAA2B,OAAOC,QAAQ,qBAAqBzB,QAAeC,OAAW,IAE/DyB,OAAM,KAEL7B,EAAA2B,OAAOG,QAAQ,oBAAoB3B,QAAeC,OAAW,G","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nfunction createPromise(position, delay) {\n\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n      resolve(\"Success!\");\n      // Notify.success(`Fulfilled promise ${position} in ${delay} ms`);\n      // Fulfill\n    } else {\n      reject(\"Error!\");// Reject\n      // Notify.failure(`Rejected promise ${position} in ${delay} ms`);\n    }\n    }, delay)\n    \n  });\n};\n\n// createPromise(3, 1000)\n//   .then(({ position, delay }) => {\n//     // console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//     Notify.success(`Fulfilled promise ${position} in ${delay} ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     // console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//     Notify.failure(`Rejected promise ${position} in ${delay} ms`);\n//   });\n\nconst formRef = document.querySelector('.form');\nconsole.log(formRef);\n\nformRef.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit (event) {\n  event.preventDefault();\n\n  const firstDelay = Number(formRef.delay.value);\n  const stepDelay = Number(formRef.step.value);\n  const amount = Number(formRef.amount.value);\n  // console.log(firstDelay);\n  // console.log(stepDelay);\n  // console.log(amount);\n\n  for (let position = 1; position <= amount; position += 1) {\n    let delay = firstDelay + stepDelay * (position - 1);\n    \n    console.log({ position, delay });\n    createPromise(position, delay)\n      .then(() => {\n  // console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        Notify.success(`Fulfilled promise ${position} in ${delay} ms`);\n      })\n      .catch(() => {\n        // console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        Notify.failure(`Rejected promise ${position} in ${delay} ms`);\n      });\n  }\n\n};"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","$47d4ff9957288465$var$formRef","document","querySelector","console","log","addEventListener","event","preventDefault","firstDelay","Number","value","stepDelay","step","amount","then","Notify","success","catch","failure"],"version":3,"file":"03-promises.591ed982.js.map"}